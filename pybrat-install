#!/usr/bin/env bash


# required and default variables
ERR=0
FIND_PATH=1

REQ_PYVER='2.7'
DEF_PYENV="${HOME}/.pyenv"
DEF_PYBREW="${HOME}/.pythonbrew"
PYBRAT_HOME="${HOME}/.pybrat"

# split $PATH
IFS=:

DIRS=
read DIRS <<END
$PATH
END



# Error logging
function _err {
    let ERR=ERR+1
}



# Function to check $PATH for given path
function _search_path {
    for dir in $DIRS; do
        if [[ "$dir" == "$1" ]]; then 
            [ -e "$dir" ] && let FIND_PATH=1 || let FIND_PATH=0
        fi
    done
}



# Check if 'pythonbrew' installed and if not, install.
function _check_req_pybrew {

    _search_path "${DEF_PYBREW}/bin"
    [ ! $FIND_PATH ] && return

    if [[ -d "$DEF_PYBREW" ]]; then
	echo "==> WARNING: 'pythonbrew' installed but not configured."
	echo "Did you configure your shell script and type `exec $SHELL`?"
	_err; return
    fi

    # good to install ...
    echo "This (development) version still requires (deprecated) 'pythonbrew'."
    read -p "Download and install 'pythonbrew' to defaults using 'curl'? [y/N]: "
    [[ "$REPLY" != "y" ]] && _err && return

    # ... so curl it all to defaults
    echo
    curl -kL http://xrl.us/pythonbrewinstall | bash
    if [ ! -e "${DEF_PYBREW}" ]; then
	echo "==> ERROR: 'pythonbrew' did not install correctly."
	_err; return
    fi

    echo; read -p "Configure 'pythonbrew' in your '~/.bashrc'? [y/N]: "
    if [[ "$REPLY" != "y" ]]; then
	printf "\n*** 'pythonbrew' needs to be configured to work! ***\n"
	_err; return
    fi

    printf "\n# 'pythonbrew' environment configuration\n" >> ${HOME}/.bashrc
    echo "[[ -s ${HOME}/.pythonbrew/etc/bashrc ]] && source ${HOME}/.pythonbrew/etc/bashrc" \
	>> ${HOME}/.bashrc

    echo; echo 'DONE! You need to restart your shell. Type `exec $SHELL`.'
    printf "\n(On uninstall, delete 'pythonbrew' section from '${HOME}/.bashrc'.)\n"

    _err; return
}



# Check if 'pyenv' and plugins are installed and if not, install.
function _check_req_pyenv {

    _search_path "${DEF_PYENV}/bin"
#############
    echo "$FIND_PATH"
    [ ! -z "$FIND_PATH" ] && return

    # check for .pyenv directory in case installed but not config'd
    if [[ ! -d "$DEF_PYENV" ]]; then
        echo "==> WARNING: 'pyenv' installed but not configured."
        echo "Did you read the 'README.md' in '${DEF_PYENV}'?"
	_err; return
    fi

    # good to install here ...
    echo "This version of PyBrat requires 'pyenv'."
    read -p "Download and install 'pyenv' to defaults from 'github'? [y/N]: "
    [[ "$REPLY" != "y" ]] && _err && return
    
    # ... so clone it all from github
    echo
    git clone git://github.com/yyuu/pyenv.git $DEF_PYENV
    if [ ! -e "${DEF_PYENV}" ]; then
        echo "==> ERROR: 'pyenv' did not install correctly."
	_err; return
    fi

    echo
    git clone git://github.com/yyuu/pyenv-virtualenv.git ${DEF_PYENV}/plugins/pyenv-virtualenv
    if [ ! -e "${DEF_PYENV}/plugins/pyenv-virtualenv" ]; then
        echo "==> ERROR: 'pyenv-virtualenv' did not install correctly."
	_err; return
    fi

    # auto-configure for bash if user wants
    echo; read -p "Configure 'pyenv' for your shell? [y/N]: "
    if [[ "$REPLY" != "y" ]]; then
        printf "\n*** 'pyenv' needs to be configured to work! ***\n"
        echo "Read the 'README.md' located in the '${DEF_PYENV}' directory."
	_err; return
    fi

    local sh=
    echo; read -p "Using: [0] .bashrc, OR [1] .bash_profile ? "
    case $REPLY in
        0)
            sh=".bashrc"
            ;;
        1)
            sh=".bash_profile"
            ;;
        *)
	    _err; return
            ;;
    esac

    # append pretty 'pyenv' env vars to the chosen shell cfg
    printf "\n# 'pyenv' environment configuration\n" >> ${HOME}/${sh}
    echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ${HOME}/${sh}
    echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ${HOME}/${sh}
    echo 'eval "$(pyenv init -)"' >> ${HOME}/${sh}
    
    echo; echo 'DONE! You need to restart your shell. Type `exec $SHELL`.'
    printf "\n(On uninstall, delete 'pyenv' section from '${HOME}/${sh}'.)\n"

    _err; return
}



# bootstrap python2 if necessary
function _check_req_pyver {

    local pyver=`which python${REQ_PYVER}`

    [[ "$pyver" == *"$reqver"* ]] && return

    echo "This version of PyBrat requires Python ${REQ_PYVER}."
    read -p "Bootstrap Python-${REQ_PYVER} with 'pyenv'? [y/N]: "
    [[ "$choice" != "y" ]] && _err && return

#        _install_req_pyver
}



#===========================================#
#                    MAIN                   #
#===========================================#

ARGS=

[[ "$#" == "0" ]] && ARGS="-i" || ARGS="$@"

echo "$ARGS"

_check_req_pyenv
_check_req_pyver
_check_req_pybrew
[ ! -z "$ERR" ] && echo "==> ERROR (${ERR}): Try reinstalling after fixing stuff." && exit $ERR

if [[ "$1" == "-i" || "$1" == "--install" ]]; then
    _search_path $PYBRAT_HOME
    [ ! $FIND_PATH ] && echo "PyBrat is already installed. Uninstall first." && exit 1
fi

if [[ -e "${PWD}/scripts/pybrat_install.py" ]]; then 
    /usr/bin/python2 "${PWD}/scripts/pybrat_install.py" $ARGS
else
    echo "Install module not found."
fi

exit
