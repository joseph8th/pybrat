#!/usr/bin/env bash

# required and default variables
NOERR=0
FIND_PATH=1

# split $PATH for _search_path function
IFS=:
DIRS=
read DIRS <<END
$PATH
END

source ./data/pybrat.cfg

# get the app-spec install-config vars & functions
source ./pybrat/hacks/hacks.sh
source ./pybrat/hacks/pyenv/pyenv.sh
source ./pybrat/hacks/brew/brew.sh



# Error logging
function _err {
    let NOERR=NOERR+1
}



# Function to check $PATH for given peath. use $FIND_PATH abs. next
function _search_path {

    for dir in $DIRS; do
        if [[ "$dir" == *"$1"* ]]; then 
            # found the dir in the $PATH so return found
            if [[ -d "$dir" ]]; then
                FIND_PATH=0; return
            fi
        fi
    done
    # else not found
    FIND_PATH=1
}

 

# using only Python 2.7, for now ...
function _check_req_pyver {

    local pyver=`which python${REQ_PYVER}`
    if [[ "$pyver" == *"$REQ_PYVER"* ]] && [[ "$pyver" == *"$PYENV_DEF_ROOTD"* ]]
    then; return
    fi

    echo "==> This version of PyBrat requires a pyenv Python-${REQ_PYVER}."
    read -p "Bootstrap Python-${REQ_PYVER} with 'pyenv'? [y/N]: " 
    [[ "$REPLY" != "y" ]] && _err && return

############33333
    # then install a pyenv-virtualenv ...
    echo "Bootstrapping 'python${REQ_PYVER}' to use locally ..."
    exec "pyenv install ${REQ_PYVER}"
    exec "pyenv local ${REQ_PYVER}"
}



# intentionally specific hacks (plugins) install calls

# check for required dependencies
function _check_requirements {

    # install and config pyenv if user wants
    _check_req_pyenv
    [[ "$NOERR" -ne "0" ]] && return || _config_shrc_pyenv

    # use pyenv to boostrap req py ver if user wants
    [[ "$NOERR" -ne "0" ]] && return || _check_req_pyver

    # must have req python version for the rest, so return if not
    [[ "$NOERR" -ne "0" ]] && return
    
    # deprecated but needed for migration to pyenv
    _check_req_pybrew
    _config_shrc_pybrew
}



#### Command line option functions. ####

# shell based installer
function _run_shinstall {

    # make sure it's not already installed correctly
    if [[ -e "${PYBRAT_DEF_ROOTD}" ]] || [[ -e "${PYBRAT_DEF_COMMANDD}/pybrat" ]]; then
        echo "==> ERROR: PyBrat is already installed. Uninstall first."
        _err; return
    fi

    # make sure all dependencies satisfied fully
    _check_requirements

    if [[ "$NOERR" -ne "0" ]]; then
        echo "==> ERROR (${NOERR}): Try reinstalling after fixing (${NOERR}) errors."
        _err; return
    fi

    # then we can install the default '~/.pybrat' dir
    if [[ "$PWD" -ne "$PYBRAT_DEF_ROOTD" ]]; then
        # if not already in ~/.pybrat, then use setup.py to install the files
        echo "Running setup.py ..."
        if [ -e "./setup.py" ]; then
            exec "./python${REQ_PYVER} setup.py install"
        else
            echo "==> ERROR: 'setup.py' not found."
            _err; return
        fi
    fi

    # then make the project links in '~/.config' (creating if not existent)
    if [ ! -e "$PYBRAT_DEF_PROJD" ]; then
        echo "Creating project links directory ..."
        mkdir -p $PYBRAT_DEF_PROJD
    fi

    # now install the user command 
    sudo ln -s "${PYBRAT_DEF_MAINF}" "${PYBRAT_DEF_COMMANDD}/pybrat"

    # now req perm to append user shell config script ie .bashrc
    _config_shrc_pybrat
}


# shell based uninstaller
function _run_shuninstall {

    # make sure it's installed
    if [ -e ${PYBRAT_DEF_ROOTD} ]; then
        echo "Uninstalling 'pybrat' ..."
        rm -rf "$PYBRAT_DEF_ROOTD"
        sudo rm "${PYBRAT_DEF_COMMANDD}/pybrat"
    else
        echo "Not installed. Nothing to do."
    fi
}


# shell based delete
function _run_shdelete {

    # make sure projects directory exists
    _search_path ${PYBRAT_DEF_PROJD}
    if [ -z $FIND_PATH ]; then
        echo "Deleting symbolic links to project directories ..."
        rm -rf "$PYBRAT_DEF_PROJD"
    else
        echo "Project links directory not found. Nothing to do."
    fi
}


# help function
function _run_help {
    echo "usage: install [-h | -i | -r | -u | -d]"
    echo "See 'README.md' for more information."
}



#===========================================#
#                    MAIN                   #
#===========================================#

OPTIND=1

while getopts "hirud" opt; do
    case "$opt" in
        h)
            _run_help
            exit 1
            ;;
        i)
            _run_shinstall
            exit $NOERR
            ;;
        r) 
            _run_shuninstall
            [[ "$NOERR" -eq "0" ]] && _run_shinstall
            exit $NOERR
            ;;
        u)
            _run_shuninstall
            exit $NOERR
            ;;
        d)
            -run_shuninstall
            _run_shdelete
            exit $NOERR
            ;;
    esac
done

exit $NOERR
